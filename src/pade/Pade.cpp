/* This file was autogenerated on 2023-06-11T16:58 DO NOT EDIT! */

#include "Pade.hpp"

#include <stdexcept>
#include <string>
#include <vector>

#include "Utilities.hpp"

namespace pade {
auto
boys_function_5_6(size_t order, const std::vector<double>& xs) -> std::vector<double>
{
    switch (order)
    {
        case 0:
            return boys_function_0(xs);
        case 1:
            return cpu::boys_function<5, 6, 1>(xs);
        case 2:
            return cpu::boys_function<5, 6, 2>(xs);
        case 3:
            return cpu::boys_function<5, 6, 3>(xs);
        case 4:
            return cpu::boys_function<5, 6, 4>(xs);
        case 5:
            return cpu::boys_function<5, 6, 5>(xs);
        case 6:
            return cpu::boys_function<5, 6, 6>(xs);
        case 7:
            return cpu::boys_function<5, 6, 7>(xs);
        case 8:
            return cpu::boys_function<5, 6, 8>(xs);
        case 9:
            return cpu::boys_function<5, 6, 9>(xs);
        case 10:
            return cpu::boys_function<5, 6, 10>(xs);
        case 11:
            return cpu::boys_function<5, 6, 11>(xs);
        case 12:
            return cpu::boys_function<5, 6, 12>(xs);
        case 13:
            return cpu::boys_function<5, 6, 13>(xs);
        case 14:
            return cpu::boys_function<5, 6, 14>(xs);
        case 15:
            return cpu::boys_function<5, 6, 15>(xs);
        case 16:
            return cpu::boys_function<5, 6, 16>(xs);
        case 17:
            return cpu::boys_function<5, 6, 17>(xs);
        case 18:
            return cpu::boys_function<5, 6, 18>(xs);
        case 19:
            return cpu::boys_function<5, 6, 19>(xs);
        case 20:
            return cpu::boys_function<5, 6, 20>(xs);
        default:
            throw std::invalid_argument("Maximum supported order is 20. Requested order is " + std::to_string(order));
    }
}

auto
boys_function_9_10(size_t order, const std::vector<double>& xs) -> std::vector<double>
{
    switch (order)
    {
        case 0:
            return boys_function_0(xs);
        case 1:
            return cpu::boys_function<9, 10, 1>(xs);
        case 2:
            return cpu::boys_function<9, 10, 2>(xs);
        case 3:
            return cpu::boys_function<9, 10, 3>(xs);
        case 4:
            return cpu::boys_function<9, 10, 4>(xs);
        case 5:
            return cpu::boys_function<9, 10, 5>(xs);
        case 6:
            return cpu::boys_function<9, 10, 6>(xs);
        case 7:
            return cpu::boys_function<9, 10, 7>(xs);
        case 8:
            return cpu::boys_function<9, 10, 8>(xs);
        case 9:
            return cpu::boys_function<9, 10, 9>(xs);
        case 10:
            return cpu::boys_function<9, 10, 10>(xs);
        case 11:
            return cpu::boys_function<9, 10, 11>(xs);
        case 12:
            return cpu::boys_function<9, 10, 12>(xs);
        case 13:
            return cpu::boys_function<9, 10, 13>(xs);
        case 14:
            return cpu::boys_function<9, 10, 14>(xs);
        case 15:
            return cpu::boys_function<9, 10, 15>(xs);
        case 16:
            return cpu::boys_function<9, 10, 16>(xs);
        case 17:
            return cpu::boys_function<9, 10, 17>(xs);
        case 18:
            return cpu::boys_function<9, 10, 18>(xs);
        case 19:
            return cpu::boys_function<9, 10, 19>(xs);
        case 20:
            return cpu::boys_function<9, 10, 20>(xs);
        default:
            throw std::invalid_argument("Maximum supported order is 20. Requested order is " + std::to_string(order));
    }
}

auto
boys_function_15_16(size_t order, const std::vector<double>& xs) -> std::vector<double>
{
    switch (order)
    {
        case 0:
            return boys_function_0(xs);
        case 1:
            return cpu::boys_function<15, 16, 1>(xs);
        case 2:
            return cpu::boys_function<15, 16, 2>(xs);
        case 3:
            return cpu::boys_function<15, 16, 3>(xs);
        case 4:
            return cpu::boys_function<15, 16, 4>(xs);
        case 5:
            return cpu::boys_function<15, 16, 5>(xs);
        case 6:
            return cpu::boys_function<15, 16, 6>(xs);
        case 7:
            return cpu::boys_function<15, 16, 7>(xs);
        case 8:
            return cpu::boys_function<15, 16, 8>(xs);
        case 9:
            return cpu::boys_function<15, 16, 9>(xs);
        case 10:
            return cpu::boys_function<15, 16, 10>(xs);
        case 11:
            return cpu::boys_function<15, 16, 11>(xs);
        case 12:
            return cpu::boys_function<15, 16, 12>(xs);
        case 13:
            return cpu::boys_function<15, 16, 13>(xs);
        case 14:
            return cpu::boys_function<15, 16, 14>(xs);
        case 15:
            return cpu::boys_function<15, 16, 15>(xs);
        case 16:
            return cpu::boys_function<15, 16, 16>(xs);
        case 17:
            return cpu::boys_function<15, 16, 17>(xs);
        case 18:
            return cpu::boys_function<15, 16, 18>(xs);
        case 19:
            return cpu::boys_function<15, 16, 19>(xs);
        case 20:
            return cpu::boys_function<15, 16, 20>(xs);
        default:
            throw std::invalid_argument("Maximum supported order is 20. Requested order is " + std::to_string(order));
    }
}

auto
boys_function_25_26(size_t order, const std::vector<double>& xs) -> std::vector<double>
{
    switch (order)
    {
        case 0:
            return boys_function_0(xs);
        case 1:
            return cpu::boys_function<25, 26, 1>(xs);
        case 2:
            return cpu::boys_function<25, 26, 2>(xs);
        case 3:
            return cpu::boys_function<25, 26, 3>(xs);
        case 4:
            return cpu::boys_function<25, 26, 4>(xs);
        case 5:
            return cpu::boys_function<25, 26, 5>(xs);
        case 6:
            return cpu::boys_function<25, 26, 6>(xs);
        case 7:
            return cpu::boys_function<25, 26, 7>(xs);
        case 8:
            return cpu::boys_function<25, 26, 8>(xs);
        case 9:
            return cpu::boys_function<25, 26, 9>(xs);
        case 10:
            return cpu::boys_function<25, 26, 10>(xs);
        case 11:
            return cpu::boys_function<25, 26, 11>(xs);
        case 12:
            return cpu::boys_function<25, 26, 12>(xs);
        case 13:
            return cpu::boys_function<25, 26, 13>(xs);
        case 14:
            return cpu::boys_function<25, 26, 14>(xs);
        case 15:
            return cpu::boys_function<25, 26, 15>(xs);
        case 16:
            return cpu::boys_function<25, 26, 16>(xs);
        case 17:
            return cpu::boys_function<25, 26, 17>(xs);
        case 18:
            return cpu::boys_function<25, 26, 18>(xs);
        case 19:
            return cpu::boys_function<25, 26, 19>(xs);
        case 20:
            return cpu::boys_function<25, 26, 20>(xs);
        default:
            throw std::invalid_argument("Maximum supported order is 20. Requested order is " + std::to_string(order));
    }
}

}  // namespace pade
